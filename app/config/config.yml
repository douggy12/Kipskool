imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr

framework:
    #esi: ~
    translator: { fallbacks: ["%locale%"] }
    secret: '%secret%'
    router:
        resource: '%kernel.root_dir%/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    globals:
        raccourci: "@kipskool_news.raccourci_texte"
    form_themes:
      - 'VichUploaderBundle:Form:fields.html.twig'



# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/../var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# Sonata configuration
sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]
        # ...

# FOS config
fos_user:
    db_driver:     orm                       # Le type de BDD à utiliser, nous utilisons l'ORM Doctrine depuis le début
    firewall_name: main                      # Le nom du firewall derrière lequel on utilisera ces utilisateurs
    user_class:    NewsBundle\Entity\Perso # La classe de l'entité User que nous utilisons
    from_email:
      address: "noreply@Kipskool.com"
      sender_name: "No reply"
    registration:
      form:
        type: NewsBundle\Form\RegistrationType

sonata_admin:
    title:      KipsKool Admin
    title_logo: img/logo_small.png
    templates:
        layout:     admin_layout.html.twig

vich_uploader:
    db_driver: orm # or mongodb or propel or phpcr
    mappings:
        articlePerso_image:
            uri_prefix:         /images/articleperso
            upload_destination: '%kernel.root_dir%/../web/images/articleperso'


        perso_image:
            uri_prefix:         /images/avatar
            upload_destination: '%kernel.root_dir%/../web/images/avatar'

        article_image:
            uri_prefix: /images/article
            upload_destination: '%kernel.root_dir%/../web/images/article'

# app/config/config.yml

liip_imagine:

    # configure resolvers
    resolvers:

        # setup the default resolver
        default:

            # use the default web path
            web_path: ~

    # your filter sets are defined here
    filter_sets:

        # use the default cache configuration
        cache: ~

        # the name of the "filter set"
        article_thumb2:

            # adjust the image quality to 75%
            quality: 75

            # list of transformations to apply (the "filters")
            filters:

                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail:
                    size: [120, 120]
                    mode: outbound
                    allow_upscale: yes



        article_image2:

            quality: 75
            filters:
                thumbnail:
                    mode: inset
                    size: [600,400]
                    allow_upscale: false

        article_wide3:
          quality: 50
          filters:
            upscale:
              min: [1643, 0]
            crop:
              size: [1643,270]
              start: [0, 130]



        avatar_image2:

          quality: 75
          filters:
            thumbnail:
              mode: outbound
              size: [400,400]
              allow_upscale: true

        avatar_mini2:
          quality : 75
          filters:
            thumbnail:
              mode: outbound
              size: [40,40]
              allow_upscale: yes

        avatar_wide2:
          quality : 75
          filters:
            thumbnail:
              mode: outbound
              size: [2560,260]
              allow_upscale: true